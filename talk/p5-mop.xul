<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="chrome://global/skin/" type="text/css"?><?xml-stylesheet href="takahashi.css" type="text/css"?><page xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" id="presentation" xmlns:html="http:/www.w3.org/1999/xhtml" orient="vertical" onkeypress="Presentation.onKeyPress(event);">
<html:textarea id="builtinCode" style="visibility: collapse"><![CDATA[
A Brave New
Perl World
----
Stevan Little
stevan.little@iinteractive.com
----
# this summer at YAPC::NA, then again
# at YAPC::EU, then at OSCON, and soon
# at YAPC::Asia ...
Perl 5.16 and Beyond
by Jesse Vincent
----
# the thing that jumped out at me was
Reducing the
Perl Core
----
# the idea put forth was to move
# things into modules, where they can
# be loaded as needed, but not burden
# the core perl-guts with them
Core ↝ Modules
# I used this neat unicode wavy arrow
# because there is a certain amount of
# handwaving here. Largely because he
# also talks about preserving past
# version semantics and other not so
# simple things.
----
# but to be honest, if we can even get
# 75% of what Jesse wants done, we will
# be is an incredibly exciting place
75%
----
# hell, even if it is only 50%, that
# is still a pretty awesome accomplishment
# and would me a LOT of the future of perl
50%
----
# because, to put it simply, ...
A simpler language
is a more
evolve-able language
----
  Perl was always designed to
  be an evolving language.
                        — Larry Wall
----
# so, before Jesse gave his talks there
# had been some rumbling that he was perhaps
# open to the idea of putting  MOP into Perl
# so I had actually contacted him about this
# and discussed the possibility, which he
# then ended up putting in his talk slides
# and so that began my
Perl 5 MOP
# project, and since I only have 20 min that
# is largely what this talk is about
----
# wtf is a mop?
MOP???
----
# An API for your object system
API
----
# the mechanics of OO
Classes, Methods,
Attributes and
Instances
----
# or, as I am sometimes fond
# of telling people
... an abstraction of a
system of abstractions
that is used to build
abstractions.
----
an abstraction
(the MOP)
----
system of abstractions
(classes, methods, etc.)
----
build abstractions
(your classes)
----
# now, lets stop to take a look
# at what kind of MOPs exist in
# Perl 5 today
Status Quo
----
# very manual mop, which a
# quirky (to say the least) API
*{$pkg . '::foo'} = \&bar;
----
# NOTE: Moose 2.0205 is depended
# on by 1433 modules on CPAN
Moose
----
# which underlies Moose
Class::MOP
----
# older MOP created by David Wheeler
Class::Meta
----
# perl5i kinda has one
# some of the other Moose-a-likes do too
and others
# so this is all well and good, we have
# gotten a LONG way on these tools, the
# core "MOP" has served us well for ~20
# years, allowing things like Class::Accessor
# and other useful modules, Moose has been
# around for 5+ years now, etc etc.
# But what about the next ~20 years? Can
# we still continue build and inovate on this
# same foundation?
----
The Future
(perhaps)
# what follows is a short tour of my
# proposed new object system for Perl 5
# note that we are still in an early stage
# so some syntax may change and once this
# goes to p5p the color of the bikeshed will
# no doubt go through many revisions too.
# But this is a start, and hopefully one
# in the right direction, you be the judge.
----
# NOTE:
# - class keyword
#     - if no superclass, inherits from Object by default
# - has keyword
#     - "instance-lexical" scoping of attributes
#     - build in support for ro, rw and wo accessors
#         - this is actually a metadata expression
#             - which is like annotations (Java), attributes (C#), decorators (Python)
#             - it is executed at compile time and passed to the meta object being created
#             - metadata is available on the class, has and method keywords
#     - setting the default values of attributes
# - method keyword
#     - the attributes are available in methods as lexical variables
#         - the scope of them being carried around in the instance
#     - the destructuring bind in the clear method
    class Point {
        has $x ( is => 'rw' ) = 0;
        has $y ( is => 'rw' ) = 0;

        method clear {
            ($x, $y) = (0, 0);
        }
    }
----
# NOTE:
# - instance creation is pretty straight forward
#    - constructor takes name/value pairs of the attributes
#    - we didn't have to write a &new method, because we inherited from Object
    my $point = Point->new( x => 10, y => 20 );
----
# NOTE:
# - the extends syntax
# - that $self exists inside methods
# - the next::method syntax calling the superclass-method
    class Point3D (extends => Point) {
        has $z ( is => 'rw' ) = 0;

        method clear {
            $self->next::method;
            $z = 0;
        }
    }
----
# NOTE:
# - how clean the += and -= makes things
#     - note there is no reference to $self in this entire class
# - simple signatures on methods
    class BankAccount {
        has $balance ( is => 'ro' ) = 0;

        method deposit ($amount) {
            $balance += $amount
        }

        method withdraw ($amount) {
            die "Account overdrawn"
                if ($balance >= $amount);
            $balance -= $amount;
        }
    }
----
# NOTE:
# - $balance is not accessible in the subclass methods
#     - attributes are completely private
#     - which means we can now use undescore prefixed methods for protected
    class CheckingAccount (extends => BankAccount) {
        has $overdraft_account ( is => 'rw' );

        method withdraw ($amount) {

            my $overdraft_amount = $amount - $self->balance;

            if ( $overdraft_account && $overdraft_amount > 0 ) {
                $overdraft_account->withdraw(
                    $overdraft_amount
                );
                $self->deposit( $overdraft_amount );
            }

            $self->next::method( $amount );
        }
    }
----
# NOTE:
# - spelling errors on slots are compile time errors
#    - similar to inside-out objects, but less cumbersome
    class Foo {
        has $bar;

        method bar { $baz }; # COMPILE TIME ERROR!
    }
----
# NOTE:
# - packages can contain classes
#     - because classes are first class citizens just like subs, etc.
#     - this is much like other langauges (Java, etc)
# - classes don't need strict and warnings
#     - it would be on by default
    package Foo;

    use strict;
    use warnings;

    class Bar {
        has $baz;
        method foo { $baz }
    }
----
# NOTE:
# - and they are called just as you would expect
    my $foobar = Foo::Bar->new( baz => 'gorch' );
----
# NOTE:
# - the class has access to the package scope as well
#     - this means you can have private subs that are not part of the class namespace
#     - this means you can have static class scoped data as well
#     - the possibilities here are pretty vast ...
    package Bar;

    our $FOO = 100_000;
    sub do_something { ... }

    class Baz {
        has $gorch = 10;
        method foo {
            do_something( $gorch, $FOO )
        }
    }
----
# NOTE:
# - import functions into your package,
#     - then use them in your class
#     - this removes the need to import anything into your class namespace.
#     - no more namespace::clean hacks
# - this also shows BUILD
#     - works just like Moose does
    package DB::FlatFile;

    use Path::Class qw[ file ]

    class DataFile {
        has $path;
        has $file;
        has $data ( is => 'ro' );

        method BUILD {
            $file = file( $path );
            $data = [ $file->slurp( chomp => 1 ) ];
        }
    }
----
# all of this actually exists too
http://github.com/stevan/p5-mop/
# there is a prototype even which
# tests the behavior of all of these
# examples
----
The End
----
Any Questions?
]]></html:textarea>

<deck flex="1" id="deck">

<vbox flex="1"
	onmousemove="Presentation.onMouseMoveOnCanvas(event);">
	<toolbox id="canvasToolbar">
		<toolbar>
			<toolbarbutton oncommand="Presentation.home()" label="|&lt;&lt;"
				observes="canBack"/>
			<toolbarbutton oncommand="Presentation.back()" label="&lt;"
				observes="canBack"/>
			<toolbarbutton oncommand="Presentation.forward()" label="&gt;"
				observes="canForward"/>
			<toolbarbutton oncommand="Presentation.end()" label="&gt;&gt;|"
				observes="canForward"/>
			<toolbarseparator/>
			<hbox align="center">
				<textbox id="current_page" size="4"
					oninput="if (this.value) Presentation.showPage(parseInt(this.value)-1);"/>
				<description value="/"/>
				<description id="max_page"/>
			</hbox>
			<toolbarseparator/>
			<vbox flex="2">
				<spacer flex="1"/>
				<scrollbar id="scroller"
					align="center" orient="horizontal"
					oncommand="Presentation.showPage(parseInt(event.target.getAttribute('curpos')));"
					onclick="Presentation.showPage(parseInt(event.target.getAttribute('curpos')));"
					onmousedown="Presentation.onScrollerDragStart();"
					onmousemove="Presentation.onScrollerDragMove();"
					onmouseup="Presentation.onScrollerDragDrop();"/>
				<spacer flex="1"/>
			</vbox>
			<toolbarseparator/>
			<spacer flex="1"/>
			<toolbarseparator/>
			<toolbarbutton id="toggleEva" label="Eva"
				type="checkbox"
				autoCheck="false"
				oncommand="Presentation.toggleEvaMode();"/>
			<toolbarseparator/>
			<toolbarbutton label="Edit"
				oncommand="Presentation.toggleEditMode();"/>
			<toolbarbutton oncommand="Presentation.reload();" label="Reload"/>
		</toolbar>
	</toolbox>
	<vbox flex="1" id="canvas"
		onclick="Presentation.onPresentationClick(event);">
		<spacer flex="1"/>
		<hbox flex="1">
			<spacer flex="1"/>
			<vbox id="content"/>
			<spacer flex="1"/>
		</hbox>
		<spacer flex="1"/>
	</vbox>
</vbox>


<vbox flex="1" id="edit">
	<toolbox>
		<toolbar>
			<toolbarbutton label="New Page"
				oncommand="Presentation.addPage()"/>
			<spacer flex="1"/>
			<toolbarseparator/>
			<toolbarbutton label="View"
				oncommand="Presentation.toggleEditMode();"/>
			<toolbarbutton oncommand="Presentation.reload();" label="Reload"/>
		</toolbar>
	</toolbox>
	<textbox id="textField" flex="1" multiline="true"
		oninput="Presentation.onEdit()"/>
	<hbox collapsed="true">
		<iframe id="dataLoader" onload="if (window.Presentation) Presentation.onDataLoad();"/>
	</hbox>
</vbox>

</deck>


<broadcasterset>
	<broadcaster id="canBack"/>
	<broadcaster id="canForward"/>
</broadcasterset>

<commandset>
	<command id="cmd_forward"
		oncommand="if (Presentation.isPresentationMode) Presentation.forward();"/>
	<command id="cmd_back"
		oncommand="if (Presentation.isPresentationMode) Presentation.back();"/>
	<command id="cmd_home"
		oncommand="if (Presentation.isPresentationMode) Presentation.home();"/>
	<command id="cmd_end"
		oncommand="if (Presentation.isPresentationMode) Presentation.end();"/>
</commandset>
<keyset>
	<key keycode="VK_ENTER"      command="cmd_forward"/>
	<key keycode="VK_RETURN"     command="cmd_forward"/>
	<key keycode="VK_PAGE_DOWN"  command="cmd_forward"/>
	<key keycode="VK_RIGHT"      command="cmd_forward"/>
	<key keycode="VK_DOWN"       command="cmd_forward"/>
	<!-- key keycode="VK_BACK_SPACE" command="cmd_back"/-->
	<key keycode="VK_PAGE_UP"    command="cmd_back"/>
        <!-- <key keycode="VK_BACK_UP"    command="cmd_back"/>-->
        <!-- <key keycode="VK_BACK_LEFT"  command="cmd_back"/>-->
	<key keycode="VK_HOME"       command="cmd_home"/>
	<key keycode="VK_END"        command="cmd_end"/>
	<key key="n" modifiers="accel" oncommand="Presentation.addPage();"/>
	<key key="r" modifiers="accel" oncommand="window.location.reload();"/>
	<key key="e" modifiers="accel" oncommand="Presentation.toggleEditMode();"/>
	<key key="a" modifiers="accel" oncommand="Presentation.toggleEvaMode();"/>
</keyset>


<script src="takahashi.js" type="application/x-javascript" />
</page>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Takahashi-Method-based Presentation Tool in XUL.
   -
   - The Initial Developer of the Original Code is SHIMODA Hiroshi.
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s): SHIMODA Hiroshi <piro@p.club.ne.jp>
   -
   - ***** END LICENSE BLOCK ***** -->



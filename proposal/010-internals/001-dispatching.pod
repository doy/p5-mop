
=pod

=head1 NAME

Perl 5 MOP - Internals -Method Dispatching

=head1 DESCRIPTION

The next thing we need to discuss is how methods get dispatched.
This is fundemental part of any object system and the primary
thing which you do with the instances that are discussed in the
previous document.

Note that we will allude to classes here, but we won't actually
get into the details of them until the next document.

=head2 The problem with Package based dispatching

The classic Perl object system uses packages, and the underlying
stashes, as the main means of location and dispatching of methods.

The first problem with this is that there is no (simple) way to
distinguish between methods and functions, nor is there any good
way to distinguish between class methods and instance methods.
Simply put, if it is in the package stash, it can be dispatched
on, regardless of the suitability of the actual code reference.
And worst of all, most of these issues are not detectable either
at compile time or at runtime, expect through their failures.

The second problem is with how inheritance is dispatched. The
magical C<@ISA> variable is expected to contain a string which
represents a package name. That package name is then looked up
internally and the same local package dispatching rules are
then applied. No only does this open up the possibility of
"typo as bug", but because the C<@ISA> variable must be declared
with C<our> it is not private to the package and therefore
is exposed to outside code. Of course this is considered "rude"
much like violating instance encapsulation is, but the fact
remains that it is still exposed.

To compound this second problem, the newly added C<mro> features,
while better encapsulated behind an API, still deal with strings
as package names.

In short, the "class is just a package" system is fragile and
produces very difficult to resolve ambiguity, both due to the fact
that the package and stash serve too many, sometimes conflicting,
purposes at once.

It is my opinion that this new system no longer use the package
mechanism for dispatching or stashing of methods.

=head2 The dispatching API

Through the process of dispatching, the new instance structures
(described in F<000-instance.pod>) should be passed into functions
in the L<mop::internal::dispatcher> module. These functions will
use the other L<mop::internal::> APIs to accomplish the
dispatching of the method.

The most useful parts of the dispatcher are the three methods;
C<WALKMETH>, C<WALKCLASS> and C<DISPATCH>. These were somewhat
borrowed from Perl 6, but with some modifications. Each one has
a specific set of responsibilities.

=over 4

=item B<WALKMETH ($class, $method_name, ?%opts)>

This is primarliy responsible for finding a method within a
given class. This means that it must know enough about a class
to be able to find a method within it.

=item B<WALKCLASS ($class, $solver, ?%opts)>

This is primarily responsible for traversing the C<mro> of
a class and applying a C<$solver> callback to each one until
the callback returns something.

=item B<DISPATCH ($method_name, $invocant, @args)>

This is concerned with finding the method, after which it
will call C<CALLMETHOD> to execute it. It uses the C<WALKMETH>
and C<WALKCLASS> functions to accomplish this.

=item B<CALLMETHOD ($method, $invocant, @args)>

This is concerned with setting up a method to be executed
and delegating details to the method object itself.

=item B<NEXTMETHOD ($method_name, $invocant, @args)>

This is the means by which a super method can be called. This
could be viewed as conceptually similar to the C<SUPER> package
or the C<next::method> method in classic Perl OO, though its
behavior will be different.

B<AUTHORS NOTE>

I am unsure about C<NEXTMETHOD> and exactly how it should be
accomplished. It could be argued that this feature could be
handled by a separate package, but this likely should aim to
work similar to the C<next::method> package.

Also note that we are still deep in the internals, so this is
by no means a user-exposed syntax. How that is handled is
pretty much irrelevant to this (though how this is handled
is critically important to the user-level syntax, and
therein lies my uncertainty).

=head1 AUTHOR

Stevan Little E<lt>stevan.little@iinteractive.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2011 Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

=pod

=head1 NAME

Perl 5 MOP - Internals - The Instance Structure

=head1 DESCRIPTION

So the first thing we need to discuss about the internals is the instance
structure itself. Every object in the entire MOP eco-system will be
represented with one of these, so it is important to describe them first.

=head2 The problem with HASH based instances

The HASH ref instance has served Perl well over the many years when it was
considered the defacto instance structure. However, the HASH ref based
instance has some very well known issues.

One of the most common issues is that of typos on key names. The recent
trend of Inside-Out objects aimed itself at trying to fix this by inverting
the instance structure such that a typo would result in a compile-time
syntax error.

Another very common issue is the complete lack of privacy for not only
the individual instance slots, which can be accessed by anyone anywhere,
but also on the entire instance structure itself. Recent trends have
pushed hard the fact that this is considered "rude" and that accessor
methods should always be used instead. However, while it is certainly
good taste (and common OO practive in most all languages) to force the
use of accessor methods I<outside> of an object's methods, it is not so
true for access I<inside> of an object's methods.

Still another less common issue is object identity. In a single threaded,
single process non-networked application, then using the existing Perl
convention of "reference address as object identity" would be fine. But
we live in a heavily threaded multi-process networked world and this is
simply not sufficient.

It is my opinion that the best way to do this is to create a defacto
instance structure for use with a new style Perl OO. The proposed
instance structure aims to solve all of these issues in a satisfactory
way.

B<AUTHORS NOTE>

It should be noted that how we solve these issues will likely not be
obvious just from this document, but I think it best to start off
addressing this early.

Additionally it is my intention to allow for the MOP internals to
be pluggable, so while this may be the I<standard> instance structure,
it won't be the I<only> instance structure.

=head2 The structure of an instance

This describes the basic structure of the instance, it is expected that
this is a C-level component and so likely implemented as C struct.

There should be Perl-level access to these structures through the
functions in the L<mop::internal::instance> package. These functions
will likely be implemented in C and be what is used internally.

=over 4

=item B<UUID>

Object identity is a very important thing, especially in the highly
distributed and networked world we live in. Not only should an identity
be thread-safe, but it should also be safe across process boundries as
well as machine boundries. A UUID (sometimes referred to as GUID) is
likely the best way to accomplish this.

B<AUTHORS NOTE>

I am perfectly willing to entertain other ideas for this, but whatever
is chosen must meet the criteria as well as a UUID/GUID would.

=item B<Class pointer>

At the most basic level, an object must know what class created it so
that it knows where to find the methods that can be called on it. This
is also very important for programatic introspection of the MOP.

=item B<Slot container>

This is a set of key-value pairs that hold the data for each slot.

B<AUTHORS NOTE>

In the prototype this is represented with a HASH ref whose keys all have
a sigil on them and whose values are all SCALAR references. The reason
behind this particular data structure is that it is what is compatible
with the C<PadWalker::set_closed_over> function. The reason for this
will become more obvious when we discuss methods in that document.

It should also be noted that this is simply an implementation choice,
as with the object identity, I am very open to other suggestions
assuming they can meet the criteria that will become more obvious in
some of the later documents.

=back

=head1 AUTHOR

Stevan Little E<lt>stevan.little@iinteractive.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2011 Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut